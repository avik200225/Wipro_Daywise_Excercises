//package com.wipro.orderms.service.impl;
//
//import com.wipro.orderms.client.ProductClient;
//import com.wipro.orderms.dto.OrderCreateRequest;
//import com.wipro.orderms.dto.ProductDTO;
//import com.wipro.orderms.entity.Cart;
//import com.wipro.orderms.entity.Order;
//import com.wipro.orderms.entity.OrderStatus;
//import com.wipro.orderms.events.OrderCommand;
//import com.wipro.orderms.events.Topics;
//import com.wipro.orderms.repo.CartRepo;
//import com.wipro.orderms.repo.OrderRepo;
//import com.wipro.orderms.service.OrderService;
//import jakarta.transaction.Transactional;
//import lombok.RequiredArgsConstructor;
//import org.springframework.http.HttpStatus;
//import org.springframework.kafka.core.KafkaTemplate;
//import org.springframework.stereotype.Service;
//import org.springframework.web.server.ResponseStatusException;
//
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.Map;
//
//@Service
//@RequiredArgsConstructor
//public class OrderServiceImpl implements OrderService {
//
//  private final OrderRepo orderRepo;
//  private final CartRepo cartRepo;
//  private final ProductClient productClient;           // read-only: availability check
//  private final KafkaTemplate<String,Object> kafka;    // T1 producer
//
//  @Override
//  @Transactional
//  public Order create(OrderCreateRequest req) {
//    Cart cart = cartRepo.findByUserId(req.getUserId())
//        .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cart is empty"));
//    if (cart.getProdDetails().isEmpty())
//      throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Cart has no items");
//
//    // validate availability (per spec)
//    for (Map.Entry<Integer,Integer> e : cart.getProdDetails().entrySet()) {
//      ProductDTO p = productClient.getById(e.getKey());
//      int avail = p.getProductAvailableQty()==null?0:p.getProductAvailableQty();
//      if (e.getValue() > avail) {
//        throw new ResponseStatusException(HttpStatus.CONFLICT,
//          "Requested qty not available for productId=" + e.getKey());
//      }
//    }
//
//    // create order
//    Order order = Order.builder()
//        .userId(req.getUserId())
//        .productQuantityMap(cart.getProdDetails())
//        .totalAmount(cart.getTotalPrice())
//        .orderStatus(OrderStatus.PLACED)
//        .orderDate(LocalDateTime.now())
//        .build();
//    order = orderRepo.save(order);
//
//    // send command to ProductMS (T1) to deduct
//    var cmd = OrderCommand.builder()
//        .type(OrderCommand.Type.DEDUCT)
//        .orderId(order.getOrderId())
//        .userId(order.getUserId())
//        .productQuantityMap(order.getProductQuantityMap())
//        .build();
//    kafka.send(Topics.T1_ORDER_COMMANDS, String.valueOf(order.getOrderId()), cmd);
//
//    // clear cart
//    cart.getProdDetails().clear();
//    cart.setTotalQty(0);
//    cart.setTotalPrice(0.0);
//    cartRepo.save(cart);
//
//    return order;
//  }
//
//  @Override
//  @Transactional
//  public Order cancel(Integer orderId) {
//    Order ord = orderRepo.findById(orderId)
//        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Order not found"));
//    if (ord.getOrderStatus() == OrderStatus.CANCELLED) return ord;
//
//    ord.setOrderStatus(OrderStatus.CANCELLED);
//    orderRepo.save(ord);
//
//    // send restore command on T1
//    var cmd = OrderCommand.builder()
//        .type(OrderCommand.Type.RESTORE)
//        .orderId(ord.getOrderId())
//        .userId(ord.getUserId())
//        .productQuantityMap(ord.getProductQuantityMap())
//        .build();
//    kafka.send(Topics.T1_ORDER_COMMANDS, String.valueOf(ord.getOrderId()), cmd);
//
//    return ord;
//  }
//
//  @Override public List<Order> listAll() { return orderRepo.findAll(); }
//  @Override public List<Order> listByUser(Integer userId) { return orderRepo.findByUserId(userId); }
//  @Override public Order details(Integer orderId) {
//    return orderRepo.findById(orderId)
//        .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Order not found"));
//  }
//}
