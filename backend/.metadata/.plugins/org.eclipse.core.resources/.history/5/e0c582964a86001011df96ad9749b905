//package com.wipro.orderms.service.impl;
//
//import com.wipro.orderms.client.ProductClient;
//import com.wipro.orderms.dto.CartAddRequest;
//import com.wipro.orderms.dto.CartUpdateRequest;
//import com.wipro.orderms.dto.ProductDTO;
//import com.wipro.orderms.entity.Cart;
//import com.wipro.orderms.repo.CartRepo;
//import com.wipro.orderms.service.CartService;
//import jakarta.transaction.Transactional;
//import lombok.RequiredArgsConstructor;
//import org.springframework.stereotype.Service;
//
//import java.util.Map;
//
//@Service
//@RequiredArgsConstructor
//public class CartServiceImpl implements CartService {
//
//  private final CartRepo repo;
//  private final ProductClient productClient;
//
//  @Override
//  public Cart view(Integer userId) {
//    return repo.findByUserId(userId)
//        .orElseGet(() -> repo.save(Cart.builder().userId(userId).build()));
//  }
//
//  @Override
//  @Transactional
//  public Cart add(CartAddRequest req) {
//    Cart cart = view(req.getUserId());
//    cart.getProdDetails().merge(req.getProductId(), req.getQty(), Integer::sum);
//    recompute(cart);
//    return repo.save(cart);
//  }
//
//  @Override
//  @Transactional
//  public Cart update(CartUpdateRequest req) {
//    Cart cart = view(req.getUserId());
//    if (req.getQty() == 0) cart.getProdDetails().remove(req.getProductId());
//    else cart.getProdDetails().put(req.getProductId(), req.getQty());
//    recompute(cart);
//    return repo.save(cart);
//  }
//
//  @Override
//  @Transactional
//  public Cart delete(Integer userId, Integer productId) {
//    Cart cart = view(userId);
//    cart.getProdDetails().remove(productId);
//    recompute(cart);
//    return repo.save(cart);
//  }
//
//  private void recompute(Cart cart) {
//    int tq = 0; double tp = 0.0;
//    for (Map.Entry<Integer,Integer> e : cart.getProdDetails().entrySet()) {
//      ProductDTO p = productClient.getById(e.getKey());
//      double price = p.getProductPrice()==null?0.0:p.getProductPrice();
//      tq += e.getValue();
//      tp += price * e.getValue();
//    }
//    cart.setTotalQty(tq);
//    cart.setTotalPrice(tp);
//  }
//}
//
package com.wipro.orderms.service.impl;

import com.wipro.orderms.client.ProductClient;
import com.wipro.orderms.dto.*;
import com.wipro.orderms.entity.Cart;
import com.wipro.orderms.repo.CartRepository;
import com.wipro.orderms.service.CartService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@RequiredArgsConstructor
@Transactional
public class CartServiceImpl implements CartService {

  private final CartRepository repo;
  private final ProductClient productClient;

  @Override
  public CartResponse addProduct(AddOrUpdateReq req) {
    Cart cart = repo.findByUserId(req.getUserId()).orElseGet(() -> {
      Cart c = new Cart();
      c.setUserId(req.getUserId());
      c.setProdDetails(new HashMap<>());
      return repo.save(c);
    });
    cart.getProdDetails().merge(req.getProductId(), req.getQty(), Integer::sum);
    recalcTotals(cart);
    repo.save(cart);
    return toResponse(cart, true);
  }

  @Override
  public CartResponse updateQuantity(AddOrUpdateReq req) {
    Cart cart = repo.findByUserId(req.getUserId())
        .orElseThrow(() -> new NoSuchElementException("Cart not found"));
    if (req.getQty() == null || req.getQty() <= 0) {
      cart.getProdDetails().remove(req.getProductId());
    } else {
      cart.getProdDetails().put(req.getProductId(), req.getQty());
    }
    recalcTotals(cart);
    repo.save(cart);
    return toResponse(cart, true);
  }

  @Override
  public void deleteProduct(Integer userId, Integer productId) {
    Cart cart = repo.findByUserId(userId)
        .orElseThrow(() -> new NoSuchElementException("Cart not found"));
    cart.getProdDetails().remove(productId);
    recalcTotals(cart);
    repo.save(cart);
  }

  @Override
  public CartResponse getCart(Integer userId) {
    Cart cart = repo.findByUserId(userId)
        .orElseGet(() -> repo.save(Cart.builder()
            .userId(userId).prodDetails(new HashMap<>()).build()));
    recalcTotals(cart);
    return toResponse(cart, true);
  }

  private void recalcTotals(Cart cart) {
    int totalQty = cart.getProdDetails().values().stream()
        .mapToInt(Integer::intValue).sum();
    double totalPrice = 0.0;
    for (Map.Entry<Integer,Integer> e : cart.getProdDetails().entrySet()) {
      ProductDTO p = safeGetProduct(e.getKey());
      double price = (p != null && p.getProductPrice() != null) ? p.getProductPrice() : 0.0;
      totalPrice += price * e.getValue();
    }
    cart.setTotalQty(totalQty);
    cart.setTotalPrice(totalPrice);
  }

  private ProductDTO safeGetProduct(Integer productId) {
    try { return productClient.getProduct(productId); }
    catch (Exception ex) { return null; }
  }

  private CartResponse toResponse(Cart cart, boolean enrich) {
    List<CartResponse.Item> items = new ArrayList<>();
    for (Map.Entry<Integer,Integer> e : cart.getProdDetails().entrySet()) {
      ProductDTO p = enrich ? safeGetProduct(e.getKey()) : null;
      items.add(CartResponse.Item.builder()
          .productId(e.getKey())
          .qty(e.getValue())
          .name(p != null ? p.getProductName() : null)
          .price(p != null ? p.getProductPrice() : null)
          .availableQty(p != null ? p.getProductAvailableQty() : null)
          .imgUrl(p != null ? p.getProductImgUrl() : null)
          .build());
    }
    return CartResponse.builder()
        .id(cart.getId())
        .userId(cart.getUserId())
        .items(items)
        .totalQty(cart.getTotalQty())
        .totalPrice(cart.getTotalPrice())
        .build();
  }
}
