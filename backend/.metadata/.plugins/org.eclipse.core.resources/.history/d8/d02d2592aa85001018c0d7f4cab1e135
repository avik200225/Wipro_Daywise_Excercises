//package com.wipro.productms.config;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.security.web.SecurityFilterChain;
//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//
//@EnableWebSecurity
//@Configuration
//public class WebSecurityConfig {
//
//    @Bean
//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//        http
//            .csrf().disable()
//            .authorizeHttpRequests(auth -> auth
//            		.requestMatchers("/user/login","/user/logout/**","/user/saveuser","/user/saveadmin").permitAll()
//                .anyRequest().authenticated() 
//            )
//            .addFilterAfter(new JWTAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class);
//
//        return http.build();
//    }
//}

package com.wipro.productms.config;

import com.wipro.productms.config.JWTAuthorizationFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class WebSecurityConfig {

  private final JWTAuthorizationFilter jwtFilter;

  public WebSecurityConfig(JWTAuthorizationFilter jwtFilter) {
    this.jwtFilter = jwtFilter;
  }

  @Bean
  SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http
      .csrf(csrf -> csrf.disable())
      .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
      .authorizeHttpRequests(auth -> auth
          // CORS preflight
          .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()
          // Allow read for everyone (your listing/search)
          .requestMatchers(HttpMethod.GET, "/product/**").permitAll()
          // Write requires ADMIN (adjust if you want USER too)
          .requestMatchers(HttpMethod.POST, "/product/**").hasRole("ADMIN")
          .requestMatchers(HttpMethod.PUT,  "/product/**").hasRole("ADMIN")
          .requestMatchers(HttpMethod.DELETE,"/product/**").hasRole("ADMIN")
          // everything else must be authenticated
          .anyRequest().authenticated()
      )
      .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

    return http.build();
  }
}
