package com.wipro.productms.service.impl;
import com.wipro.productms.entity.Product;
import com.wipro.productms.repo.ProductRepo;
import com.wipro.productms.service.ProductService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

import java.awt.print.Pageable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@Service
public class ProductServiceImpl implements ProductService {

//    @Autowired
//    private ProductRepo productRepo;
//
//    @Override
//    public Product save(Product product) {
//        return productRepo.save(product);
//    }
//
//    @Override
//    public List<Product> findAll() {
//        return productRepo.findAll();
//    }
//
//    @Override
//    public Product findById(int productId) {
//        Optional<Product> optionalProduct = productRepo.findById(productId);
//        return optionalProduct.orElse(null);
//    }
//
//    @Override
//    public List<Product> findByProductName(String productName) {
//        return productRepo.findByProductName(productName);
//    }
//
//    @Override
//    public void deleteById(int productId) {
//        productRepo.deleteById(productId);
//    }
//
//    @Override
//    public Product updateProduct(int productId, Product updatedProduct) {
//        Optional<Product> optionalProduct = productRepo.findById(productId);
//
//        if (optionalProduct.isPresent()) {
//            Product existingProduct = optionalProduct.get();
//            
//            // Update only the fields you want to allow
//            existingProduct.setProductName(updatedProduct.getProductName());
//            existingProduct.setProductDesc(updatedProduct.getProductDesc());
//            existingProduct.setProductCat(updatedProduct.getProductCat());
//            existingProduct.setMake(updatedProduct.getMake());
//            existingProduct.setProductAvailableQty(updatedProduct.getProductAvailableQty());
//            existingProduct.setProductPrice(updatedProduct.getProductPrice());
//            existingProduct.setProductImgUrl(updatedProduct.getProductImgUrl());
//            existingProduct.setDateOfManufacture(updatedProduct.getDateOfManufacture());
//            
//            return productRepo.save(existingProduct);
//        } else {
//            return null; // or throw an exception if preferred
//        }
//    }
	

	    private final ProductRepo repo;

	    public ProductServiceImpl(ProductRepo repo) {
	        this.repo = repo;
	    }

	    @Override
	    public List<Product> findAll() {
	        return repo.findAll();
	    }

	    @Override
	    public Product findById(Long id) {
	        return repo.findById(id).orElseThrow(() ->
	            new EntityNotFoundException("Product not found: " + id));
	    }

	    @Override
	    public Product create(Product p) {
	        p.setProductId(null);
	        return repo.save(p);
	    }

	    @Override
	    public Product update(Long id, Product p) {
	        Product db = findById(id);
	        // copy only present fields (keeps it non-breaking)
	        if (p.getProductName() != null) db.setProductName(p.getProductName());
	        if (p.getProductCat() != null) db.setProductCat(p.getProductCat());
	        if (p.getProductDesc() != null) db.setProductDesc(p.getProductDesc());
	        if (p.getMake() != null) db.setMake(p.getMake());
	        if (p.getProductAvailableQty() != null) db.setProductAvailableQty(p.getProductAvailableQty());
	        if (p.getProductPrice() != null) db.setProductPrice(p.getProductPrice());
	        if (p.getProductImgUrl() != null) db.setProductImgUrl(p.getProductImgUrl());
	        if (p.getDateOfManufacture() != null) db.setDateOfManufacture(p.getDateOfManufacture());
	        return repo.save(db);
	    }

	    @Override
	    public void delete(Long id) {
	        if (!repo.existsById(id)) throw new EntityNotFoundException("Product not found: " + id);
	        repo.deleteById(id);
	    }

	    @Override
	    public Page<Product> search(String field, String query, Pageable pageable) {
	        String f = (field == null ? "" : field.trim().toLowerCase());
	        String q = (query == null ? "" : query.trim());

	        switch (f) {
	            case "name":
	                return repo.findByProductNameContainingIgnoreCase(q, pageable);
	            case "category":
	                return repo.findByProductCatContainingIgnoreCase(q, pageable);
	            case "description":
	                return repo.findByProductDescContainingIgnoreCase(q, pageable);
	            case "make":
	                return repo.findByMakeContainingIgnoreCase(q, pageable);
	            case "price":
	                try {
	                    BigDecimal price = new BigDecimal(q);
	                    return repo.findByProductPrice(price, pageable);
	                } catch (NumberFormatException ex) {
	                    // return empty page if price is not a number
	                    return Page.empty(pageable);
	                }
	            default:
	                // default: name
	                return repo.findByProductNameContainingIgnoreCase(q, pageable);
	        }
	    }
	}

}
