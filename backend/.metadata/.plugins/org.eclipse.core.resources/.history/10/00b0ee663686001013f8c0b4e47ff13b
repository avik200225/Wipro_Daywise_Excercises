//package com.wipro.productms.controller;
//
//import com.wipro.productms.entity.Product;
//import com.wipro.productms.service.ProductService;
//
//import jakarta.validation.Valid;
//
//import org.springframework.web.bind.annotation.*;
//
//import org.springframework.data.domain.Pageable;
//import java.util.List;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.data.domain.Page;
//import org.springframework.data.domain.PageRequest;
//
//@RestController
//@RequestMapping("/product")
//public class ProductController {

//    @Autowired
//    private ProductService productService;
//
//    @GetMapping
//    public List<Product> getAllProducts() {
//        return productService.findAll();
//    }
//
//    @GetMapping("/{id}")
//    public Product getProductById(@PathVariable int id) {
//        return productService.findById(id);
//    }
//
//    @GetMapping("/searchByName")
//    public List<Product> getProductsByName(@RequestParam String name) {
//        return productService.findByProductName(name);
//    }
//
//    @PostMapping
//    public String createProduct(@RequestBody Product product) {
//        productService.save(product);
//        return "PRODUCT SUCCESSFULLY CREATED";
//    }
//
//    @PutMapping("/{id}")
//    public Product updateProduct(@PathVariable int id, @RequestBody Product product) {
//        return productService.updateProduct(id, product);
//    }
//
//    @DeleteMapping("/{id}")
//    public String deleteProduct(@PathVariable int id) {
//        productService.deleteById(id);
//        return "PRODUCT SUCCESSFULLY DELETED";
//    }
package com.wipro.productms.controller;

import com.wipro.productms.entity.Product;
import com.wipro.productms.service.ProductService;

import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/product")
//@CrossOrigin(origins = "*") // keep simple; gateway can restrict if needed
public class ProductController {

    private final ProductService service;

    public ProductController(ProductService service) {
        this.service = service;
    }

    // --- LIST ALL (used by your frontend) ---
    @GetMapping
    public List<Product> getAll() {
        return service.findAll();
    }

    // --- GET BY ID (optional) ---
    @GetMapping("/{id}")
    public Product getById(@PathVariable Long id) {
        return service.findById(id);
    }

    // --- CREATE (used by your frontend) ---
    @PostMapping
    public Product create(@Valid @RequestBody Product p) {
        return service.create(p);
    }

    // --- UPDATE (used by your frontend) ---
    @PutMapping("/{id}")
    public Product update(@PathVariable Long id, @RequestBody Product p) {
        return service.update(id, p);
    }

    // --- DELETE (used by your frontend) ---
    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        service.delete(id);
    }

    // --- SEARCH with pagination (matches sketch) ---
    // /product/search?field=category&q=Electronics&page=0&size=10
    @GetMapping("/search")
    public Page<Product> search(
            @RequestParam(defaultValue = "name") String field,
            @RequestParam(defaultValue = "") String q,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size
    ) {
        Pageable pageable = PageRequest.of(Math.max(page, 0), Math.max(size, 1));
        return service.search(field, q, pageable);
    }
}

