//package com.wipro.productms.config;
//import io.jsonwebtoken.Claims;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.JwtException;
//import io.jsonwebtoken.security.Keys;
//import jakarta.servlet.FilterChain;
//import jakarta.servlet.ServletException;
//import jakarta.servlet.http.HttpServletRequest;
//import jakarta.servlet.http.HttpServletResponse;
//import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
//import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.context.SecurityContextHolder;
//import org.springframework.web.filter.OncePerRequestFilter;
//import com.wipro.productms.util.AppConstant;
//import java.io.IOException;
//import java.security.Key;
//import java.util.Base64;
//import java.util.List;
//import java.util.stream.Collectors;
//
//
//public class JWTAuthorizationFilter extends OncePerRequestFilter {
//
//    private final String HEADER = "Authorization";
//    private final String PREFIX = "Bearer ";
//  
//    @Override
//    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
//            throws IOException, ServletException {
//
//        String uri = request.getRequestURI();
//        String servletPath = request.getServletPath();
//        System.out.println("JWT Filter - Request URI: " + uri);
//        System.out.println("JWT Filter - Servlet Path: " + servletPath);
//
//        // skip login, register, logout
//        if (uri.endsWith("/login") || uri.endsWith("/saveuser") || uri.endsWith("/saveadmin") || uri.contains("/logout")) {
//            System.out.println("JWT Filter - Skipping JWT check for this endpoint.");
//            chain.doFilter(request, response);
//            return;
//        }
//
//        if (checkJWTToken(request)) {
//            Claims claims = validateToken(request);
//            if (claims.get("authorities") != null) {
//                setUpSpringAuthentication(claims);
//            } else {
//                SecurityContextHolder.clearContext();
//            }
//        } else {
//            System.out.println("JWT Filter - No JWT found. Clearing context.");
//            SecurityContextHolder.clearContext();
//        }
//
//        chain.doFilter(request, response);
//    }
//
//    private Claims validateToken(HttpServletRequest request) {
//        String jwtToken = request.getHeader(HEADER).replace(PREFIX, "");
//        Key key = Keys.hmacShaKeyFor(Base64.getDecoder().decode(AppConstant.SECRET));
//        return Jwts.parserBuilder()
//                .setSigningKey(key)
//                .build()
//                .parseClaimsJws(jwtToken)
//                .getBody();
//    }
//
//    private void setUpSpringAuthentication(Claims claims) {
//        @SuppressWarnings("unchecked")
//        List<String> authorities = (List<String>) claims.get("authorities");
//
//        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(
//                claims.getSubject(), null,
//                authorities.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toList())
//        );
//        SecurityContextHolder.getContext().setAuthentication(auth);
//    }
//
//    private boolean checkJWTToken(HttpServletRequest request) {
//        String authHeader = request.getHeader(HEADER);
//        return authHeader != null && authHeader.startsWith(PREFIX);
//    }
//}

// src/main/java/com/wipro/productms/config/jwt/JWTAuthorizationFilter.java
package com.wipro.productms.config.jwt;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Base64;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JWTAuthorizationFilter extends OncePerRequestFilter {

  private static final String HEADER = "Authorization";
  private static final String PREFIX  = "Bearer ";

  private final Key key;

  public JWTAuthorizationFilter(@Value("${app.jwt.secret}") String secret) {
    // âœ… match USERMS: Base64 decode the configured secret
    byte[] decoded = Base64.getDecoder().decode(secret.trim());
    this.key = Keys.hmacShaKeyFor(decoded);
  }

  @Override
  protected void doFilterInternal(HttpServletRequest req, HttpServletResponse res, FilterChain chain)
      throws ServletException, IOException {

    String header = req.getHeader(HEADER);
    if (header == null || !header.startsWith(PREFIX)) {
      chain.doFilter(req, res);
      return;
    }

    try {
      String token = header.substring(PREFIX.length()).trim();
      Claims claims = Jwts.parserBuilder().setSigningKey(key).build()
          .parseClaimsJws(token).getBody();

      String subject = claims.getSubject();
      Collection<SimpleGrantedAuthority> authorities = extractAuthorities(claims);

      if (subject != null) {
        SecurityContextHolder.getContext().setAuthentication(
            new UsernamePasswordAuthenticationToken(subject, null, authorities)
        );
      }
    } catch (Exception e) {
      SecurityContextHolder.clearContext();
      res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    chain.doFilter(req, res);
  }

  @SuppressWarnings("unchecked")
  private Collection<SimpleGrantedAuthority> extractAuthorities(Claims claims) {
    Object val = claims.get("authorities");   // USERMS puts "authorities"
    if (val == null) val = claims.get("roles");
    if (val == null) val = claims.get("role");

    if (val instanceof List<?> list) {
      return list.stream().map(String::valueOf).map(SimpleGrantedAuthority::new).collect(Collectors.toList());
    }
    if (val instanceof String s) {
      return List.of(new SimpleGrantedAuthority(s));
    }
    return List.of();
  }
}
